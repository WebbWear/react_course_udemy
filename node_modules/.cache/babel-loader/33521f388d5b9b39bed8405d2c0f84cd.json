{"ast":null,"code":"/* eslint-disable class-methods-use-this */\n'use strict';\n\nvar _classCallCheck = require(\"/Users/jeff/Code-learning/react-complete-guide/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/jeff/Code-learning/react-complete-guide/node_modules/@babel/runtime/helpers/createClass\");\n\nvar Q = require('q');\n/**\n * COA Object\n *\n * Base class for all COA-related objects\n *\n * --------|-----|-----|-----\n *         | Cmd | Opt | Arg\n * --------|-----|-----|-----\n *  name   | ✓   | ✓   | ✓\n *  title  | ✓   | ✓   | ✓\n *  comp   | ✓   | ✓   | ✓\n *  reject | ✓   | ✓   | ✓\n *  end    | ✓   | ✓   | ✓\n *  apply  | ✓   | ✓   | ✓\n *\n * @class CoaObject\n */\n\n\nmodule.exports =\n/*#__PURE__*/\nfunction () {\n  function CoaObject(cmd) {\n    _classCallCheck(this, CoaObject);\n\n    this._cmd = cmd;\n    this._name = null;\n    this._title = null;\n    this._comp = null;\n  }\n  /**\n   * Set a canonical identifier to be used anywhere in the API.\n   *\n   * @param {String} name - command, option or argument name\n   * @returns {COA.CoaObject} - this instance (for chainability)\n   */\n\n\n  _createClass(CoaObject, [{\n    key: \"name\",\n    value: function name(_name) {\n      this._name = _name;\n      return this;\n    }\n    /**\n     * Set a long description to be used anywhere in text messages.\n     * @param {String} title - human readable entity title\n     * @returns {COA.CoaObject} - this instance (for chainability)\n     */\n\n  }, {\n    key: \"title\",\n    value: function title(_title) {\n      this._title = _title;\n      return this;\n    }\n    /**\n     * Set custom additional completion for current object.\n     *\n     * @param {Function} comp - completion generation function,\n     *         invoked in the context of object instance.\n     *         Accepts parameters:\n     *                 - {Object} opts - completion options\n     *         It can return promise or any other value threated as a result.\n     * @returns {COA.CoaObject} - this instance (for chainability)\n     */\n\n  }, {\n    key: \"comp\",\n    value: function comp(_comp) {\n      this._comp = _comp;\n      return this;\n    }\n    /**\n     * Apply function with arguments in a context of object instance.\n     *\n     * @param {Function} fn - body\n     * @param {Array.<*>} args... - arguments\n     * @returns {COA.CoaObject} - this instance (for chainability)\n     */\n\n  }, {\n    key: \"apply\",\n    value: function apply(fn) {\n      arguments.length > 1 ? fn.apply(this, [].slice.call(arguments, 1)) : fn.call(this);\n      return this;\n    }\n    /**\n     * Return reject of actions results promise with error code.\n     * Use in .act() for return with error.\n     * @param {Object} reason - reject reason\n     *         You can customize toString() method and exitCode property\n     *         of reason object.\n     * @returns {Q.promise} rejected promise\n     */\n\n  }, {\n    key: \"reject\",\n    value: function reject(reason) {\n      return Q.reject(reason);\n    }\n    /**\n     * Finish chain for current subcommand and return parent command instance.\n     * @returns {COA.Cmd} parent command\n     */\n\n  }, {\n    key: \"end\",\n    value: function end() {\n      return this._cmd;\n    }\n  }]);\n\n  return CoaObject;\n}();","map":null,"metadata":{},"sourceType":"script"}