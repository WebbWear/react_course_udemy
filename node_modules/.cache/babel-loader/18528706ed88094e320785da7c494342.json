{"ast":null,"code":"'use strict';\n\nvar _classCallCheck = require(\"/Users/jeff/Code-learning/react-complete-guide/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/jeff/Code-learning/react-complete-guide/node_modules/@babel/runtime/helpers/createClass\");\n\nvar _possibleConstructorReturn = require(\"/Users/jeff/Code-learning/react-complete-guide/node_modules/@babel/runtime/helpers/possibleConstructorReturn\");\n\nvar _getPrototypeOf = require(\"/Users/jeff/Code-learning/react-complete-guide/node_modules/@babel/runtime/helpers/getPrototypeOf\");\n\nvar _inherits = require(\"/Users/jeff/Code-learning/react-complete-guide/node_modules/@babel/runtime/helpers/inherits\");\n\nvar fs = require('fs');\n\nvar CoaObject = require('./coaobject');\n/**\n * COA Parameter\n *\n * Base class for options and arguments\n *\n * --------|-----|-----|-----\n *         | Cmd | Opt | Arg\n * --------|-----|-----|-----\n *  arr    |     | ✓   | ✓\n *  req    |     | ✓   | ✓\n *  val    |     | ✓   | ✓\n *  def    |     | ✓   | ✓\n *  input  |     | ✓   | ✓\n *  output |     | ✓   | ✓\n *\n * @class CoaParam\n * @extends CoaObject\n */\n\n\nmodule.exports =\n/*#__PURE__*/\nfunction (_CoaObject) {\n  _inherits(CoaParam, _CoaObject);\n\n  function CoaParam(cmd) {\n    var _this;\n\n    _classCallCheck(this, CoaParam);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(CoaParam).call(this, cmd));\n    _this._arr = false;\n    _this._req = false;\n    _this._val = undefined;\n    _this._def = undefined;\n    return _this;\n  }\n  /**\n   * Makes a param accepts multiple values.\n   * Otherwise, the value will be used by the latter passed.\n   *\n   * @returns {COA.CoaParam} - this instance (for chainability)\n   */\n\n\n  _createClass(CoaParam, [{\n    key: \"arr\",\n    value: function arr() {\n      this._arr = true;\n      return this;\n    }\n    /**\n     * Makes a param required.\n     *\n     * @returns {COA.CoaParam} - this instance (for chainability)\n     */\n\n  }, {\n    key: \"req\",\n    value: function req() {\n      this._req = true;\n      return this;\n    }\n    /**\n     * Set a validation (or value) function for param.\n     * Value from command line passes through before becoming available from API.\n     * Using for validation and convertion simple types to any values.\n     *\n     * @param {Function} val - validating function,\n     *         invoked in the context of option instance\n     *         and has one parameter with value from command line.\n     * @returns {COA.CoaParam} - this instance (for chainability)\n     */\n\n  }, {\n    key: \"val\",\n    value: function val(_val) {\n      this._val = _val;\n      return this;\n    }\n    /**\n     * Set a default value for param.\n     * Default value passed through validation function as ordinary value.\n     *\n     * @param {*} def - default value of function generator\n     * @returns {COA.CoaParam} - this instance (for chainability)\n     */\n\n  }, {\n    key: \"def\",\n    value: function def(_def) {\n      this._def = _def;\n      return this;\n    }\n    /**\n     * Make option value inputting stream.\n     * It's add useful validation and shortcut for STDIN.\n     *\n     * @returns {COA.CoaParam} - this instance (for chainability)\n     */\n\n  }, {\n    key: \"input\",\n    value: function input() {\n      process.stdin.pause();\n      return this.def(process.stdin).val(function (v) {\n        if (typeof v !== 'string') return v;\n        if (v === '-') return process.stdin;\n        var s = fs.createReadStream(v, {\n          encoding: 'utf8'\n        });\n        s.pause();\n        return s;\n      });\n    }\n    /**\n     * Make option value outputing stream.\n     * It's add useful validation and shortcut for STDOUT.\n     *\n     * @returns {COA.CoaParam} - this instance (for chainability)\n     */\n\n  }, {\n    key: \"output\",\n    value: function output() {\n      return this.def(process.stdout).val(function (v) {\n        if (typeof v !== 'string') return v;\n        if (v === '-') return process.stdout;\n        return fs.createWriteStream(v, {\n          encoding: 'utf8'\n        });\n      });\n    }\n  }]);\n\n  return CoaParam;\n}(CoaObject);","map":null,"metadata":{},"sourceType":"script"}