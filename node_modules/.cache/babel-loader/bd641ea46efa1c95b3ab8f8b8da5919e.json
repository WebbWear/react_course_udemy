{"ast":null,"code":"'use strict';\n\nvar _classCallCheck = require(\"/Users/jeff/Code-learning/react-complete-guide/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/jeff/Code-learning/react-complete-guide/node_modules/@babel/runtime/helpers/createClass\");\n\nvar _possibleConstructorReturn = require(\"/Users/jeff/Code-learning/react-complete-guide/node_modules/@babel/runtime/helpers/possibleConstructorReturn\");\n\nvar _getPrototypeOf = require(\"/Users/jeff/Code-learning/react-complete-guide/node_modules/@babel/runtime/helpers/getPrototypeOf\");\n\nvar _inherits = require(\"/Users/jeff/Code-learning/react-complete-guide/node_modules/@babel/runtime/helpers/inherits\");\n\nvar _assertThisInitialized = require(\"/Users/jeff/Code-learning/react-complete-guide/node_modules/@babel/runtime/helpers/assertThisInitialized\");\n\nvar Q = require('q'),\n    CoaParam = require('./coaparam'),\n    chalk = require('chalk');\n/**\n * Option\n *\n * Named entity. Options may have short and long keys for use from command line.\n *\n * @namespace\n * @class Opt\n * @extends CoaParam\n */\n\n\nmodule.exports =\n/*#__PURE__*/\nfunction (_CoaParam) {\n  _inherits(Opt, _CoaParam);\n\n  /**\n   * @constructs\n   * @param {COA.Cmd} cmd - parent command\n   */\n  function Opt(cmd) {\n    var _this;\n\n    _classCallCheck(this, Opt);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Opt).call(this, cmd));\n    _this._short = null;\n    _this._long = null;\n    _this._flag = false;\n    _this._only = false;\n\n    _this._cmd._opts.push(_assertThisInitialized(_assertThisInitialized(_this)));\n\n    return _this;\n  }\n  /**\n   * Set a short key for option to be used with one hyphen from command line.\n   *\n   * @param {String} short - short name\n   * @returns {COA.Opt} - this instance (for chainability)\n   */\n\n\n  _createClass(Opt, [{\n    key: \"short\",\n    value: function short(_short) {\n      this._short = _short;\n      this._cmd._optsByKey[\"-\".concat(_short)] = this;\n      return this;\n    }\n    /**\n     * Set a short key for option to be used with double hyphens from command line.\n     *\n     * @param {String} long - long name\n     * @returns {COA.Opt} - this instance (for chainability)\n     */\n\n  }, {\n    key: \"long\",\n    value: function long(_long) {\n      this._long = _long;\n      this._cmd._optsByKey[\"--\".concat(_long)] = this;\n      return this;\n    }\n    /**\n     * Make an option boolean, i.e. option without value.\n     *\n     * @returns {COA.Opt} - this instance (for chainability)\n     */\n\n  }, {\n    key: \"flag\",\n    value: function flag() {\n      this._flag = true;\n      return this;\n    }\n    /**\n     * Makes an option to act as a command,\n     * i.e. program will exit just after option action.\n     *\n     * @returns {COA.Opt} - this instance (for chainability)\n     */\n\n  }, {\n    key: \"only\",\n    value: function only() {\n      this._only = true;\n      return this;\n    }\n    /**\n     * Add action for current option command.\n     * This action is performed if the current option\n     * is present in parsed options (with any value).\n     *\n     * @param {Function} act - action function,\n     *         invoked in the context of command instance\n     *         and has the parameters:\n     *                 - {Object} opts - parsed options\n     *                 - {Array} args - parsed arguments\n     *                 - {Object} res - actions result accumulator\n     *         It can return rejected promise by Cmd.reject (in case of error)\n     *         or any other value treated as result.\n     * @returns {COA.Opt} - this instance (for chainability)\n     */\n\n  }, {\n    key: \"act\",\n    value: function act(_act) {\n      // Need function here for arguments\n      var opt = this;\n\n      this._cmd.act(function (opts) {\n        var _this2 = this;\n\n        if (!opts.hasOwnProperty(opt._name)) return;\n\n        var res = _act.apply(this, arguments);\n\n        if (!opt._only) return res;\n        return Q.when(res, function (out) {\n          return _this2.reject({\n            toString: function toString() {\n              return out.toString();\n            },\n            exitCode: 0\n          });\n        });\n      });\n\n      return this;\n    }\n  }, {\n    key: \"_saveVal\",\n    value: function _saveVal(opts, val) {\n      this._val && (val = this._val(val));\n      var name = this._name;\n      this._arr ? (opts[name] || (opts[name] = [])).push(val) : opts[name] = val;\n      return val;\n    }\n  }, {\n    key: \"_parse\",\n    value: function _parse(argv, opts) {\n      return this._saveVal(opts, this._flag ? true : argv.shift());\n    }\n  }, {\n    key: \"_checkParsed\",\n    value: function _checkParsed(opts) {\n      return !opts.hasOwnProperty(this._name);\n    }\n  }, {\n    key: \"_usage\",\n    value: function _usage() {\n      var res = [],\n          nameStr = this._name.toUpperCase();\n\n      if (this._short) {\n        res.push('-', chalk.greenBright(this._short));\n        this._flag || res.push(' ' + nameStr);\n        res.push(', ');\n      }\n\n      if (this._long) {\n        res.push('--', chalk.green(this._long));\n        this._flag || res.push('=' + nameStr);\n      }\n\n      res.push(' : ', this._title);\n      this._req && res.push(' ', chalk.redBright('(required)'));\n      return res.join('');\n    }\n  }, {\n    key: \"_requiredText\",\n    value: function _requiredText() {\n      return \"Missing required option:\\n  \".concat(this._usage());\n    }\n  }]);\n\n  return Opt;\n}(CoaParam);","map":null,"metadata":{},"sourceType":"script"}